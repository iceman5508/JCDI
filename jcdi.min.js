n_observer=function(){this.hijackForm=function(id,dataRules,Callback=function(status,data){console.log(data)}){var form=document.getElementById(id);form.addEventListener("submit",function(e){var formData=new n_formData(id);new n_validator(formData,dataRules);if(formData.error.length>0){e.preventDefault();Callback(!1,formData.error)}else{Callback(!0,{})}})}};function n_formData(formId){this.tag=formId;this.data={};this.error=[];this.getFormData=function(){var elements=document.getElementById(this.tag).elements;var obj={};for(var i=0;i<elements.length;i++){var item=elements.item(i);obj[item.name]=item.value}
    this.data=obj};this.getFormData();this.getData=function(name){return this.data[name]};this.toString=function(){return JSON.stringify(this.data)};this.isFieldEmpty=function(name){if(typeof this.data[name]==='undefined'){return!0}
    if(!this.data[name]){return!0}
    return!1};this.compareFields=function(field1,field2){var val1=this.data[field1].trim();var val2=this.data[field2].trim();return(val1.toLowerCase().localeCompare(val2.toLowerCase())==0?!0:!1)}};n_dataType=new function(){this.isNumeric=function(data){var t1=!Array.isArray(data)&&(data-parseFloat(data)+1)>=0;var t2=!isNaN(parseFloat(data))&&isFinite(data);return t2||t1?true:!1}
    this.isString=function(data){if(typeof data==='string'||data instanceof String){if(!this.isNumeric(data)){return!0}}return!1}
    this.isBoolean=function(data){return(typeof(data)==typeof(!0))}};n_pattern=new function(){this.isEmail=function(data){var email=/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;return email.test(String(data).toLowerCase())}
    this.isSocial=function(data){var ssn=/^[0-9]{3}\-?[0-9]{2}\-?[0-9]{4}$/;return ssn.test(data)}
    this.isPhone=function(data){var phone=/^\(?([0-9]{3})\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/;return phone.test(data)}
    this.patternMatch=function(data,pattern){var patternArray=pattern.split('');var dataArray=data.split('');var valid=!1;if(patternArray.length==dataArray.length){for(var i=0;i<patternArray.length;i++){var value=dataArray[i];if(patternArray[i]=='n'){if(n_dataType.isNumeric(value)){valid=!0}}else if(patternArray[i]=='a'){if(!n_dataType.isNumeric(value)&&value==value.toLowerCase()){valid=!0}}else if(patternArray[i]=='A'){if(!n_dataType.isNumeric(value)&&value==value.toUpperCase()){valid=!0}}else if(patternArray[i]==value){valid=!0}else{valid=!1}
        if(!valid){break}}}
        return valid}};n_validator=function(formData,dataRule={}){this.data={};this.constructor=function(){this.data=formData.data;for(var field in dataRule){var value=this.data[field];var name=dataRule[field].displayName;var validData=!0;for(var rule in dataRule[field]){var ruleValue=dataRule[field][rule];switch(rule){case 'max':if(!this.maxCheck(value,ruleValue)){formData.error.push(name+" has more char than the max of "+ruleValue);validData=!1}
    break;case 'min':if(!this.minCheck(value,ruleValue)){formData.error.push(name+" must be at least "+ruleValue+" chars.");validData=!1}
    break;case 'required':if(this.requiredCheck(field,ruleValue)){formData.error.push(name+" is a required field");validData=!1}
    break;case 'dataType':if(!this.typeCheck(value,ruleValue.toLowerCase())){formData.error.push(name+" is expected to be of type "+ruleValue);validData=!1}
    break;case 'patternType':if(!this.patternCheck(value,ruleValue.toLowerCase())){formData.error.push(name+" is expected to be a valid "+ruleValue);validData=!1}
    break;case 'matchField':if(!this.matchCheck(field,ruleValue)){formData.error.push(name+" does not match the "+ruleValue+" field.");validData=!1}
    break;case 'myPattern':if(!this.myPatternCheck(value,ruleValue)){formData.error.push(name+" is expected to be in a format as such:  "+ruleValue);validData=!1}
    break;default:break}}
    var erroredField=document.getElementById(formData.tag).elements[field];if(validData==!1){if(!erroredField.classList.contains('n_err')){erroredField.classList.add("n_err")}}else{if(erroredField.classList.contains('n_err')){erroredField.classList.remove("n_err")}}}}
    this.minCheck=function(data,min){return data.length>=min?!0:!1}
    this.maxCheck=function(data,max){return data.length<=max?!0:!1}
    this.requiredCheck=function(data,required){if(required===!0){return formData.isFieldEmpty(data)}else return!1}
    this.patternCheck=function(data,pattern){switch(pattern){case 'email':return n_pattern.isEmail(data);break;case 'ssn':return n_pattern.isSocial(data);break;case 'phone':return n_pattern.isPhone(data);break;default:return!1;break}}
    this.myPatternCheck=function(data,patter){return n_pattern.patternMatch(data,patter)}
    this.typeCheck=function(data,dataType){switch(dataType){case 'string':return n_dataType.isString(data);break;case 'number':return n_dataType.isNumeric(data);break;case 'boolean':return n_dataType.isBoolean(data);break;default:return!1;break}}
    this.matchCheck=function(fieldName,compareFieldName){return formData.compareFields(fieldName,compareFieldName)}
    this.constructor()}